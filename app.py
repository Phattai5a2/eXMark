import streamlit as st
import pdfplumber
import pandas as pd
import io
import re
import os

# ·∫®n thanh c√¥ng c·ª• Streamlit v√† c√°c bi·ªÉu t∆∞·ª£ng "Running", "Share"
st.markdown(
    """
    <style>
    [data-testid="stToolbar"] {
        visibility: hidden;
    }
    [data-testid="stStatusWidget"] {
        visibility: hidden;
    }
    [data-testid="stDecoration"] {
        visibility: hidden;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.set_page_config(page_title="Tr√≠ch xu·∫•t b·∫£ng ƒëi·ªÉm PDF", layout="wide")
st.title("üìÑ Tr√≠ch xu·∫•t b·∫£ng ƒëi·ªÉm t·ª´ file PDF")
st.markdown("T·∫£i l√™n file PDF ch·ª©a b·∫£ng ƒëi·ªÉm ƒë·ªÉ tr√≠ch xu·∫•t v√† l∆∞u ra Excel.")

def split_name(fullname):
    """Split a full name into first/middle name (H·ªç ƒë·ªám) and last name (T√™n)."""
    if not fullname:
        return '', ''
    parts = fullname.strip().split()
    if len(parts) == 1:
        return '', parts[0]
    elif len(parts) == 2:
        return parts[0], parts[1]
    else:
        return ' '.join(parts[:-1]), parts[-1]

def extract_scores_from_pdf(file):
    rows = []
    with pdfplumber.open(file) as pdf:
        for page_num, page in enumerate(pdf.pages):
            text = page.extract_text()
            if not text:
                continue
            lines = text.splitlines()
            for line in lines:
                line = line.strip()

                # B·ªè qua d√≤ng ti√™u ƒë·ªÅ ho·∫∑c ch·ª©a t·ª´ kh√≥a kh√¥ng ph·∫£i d·ªØ li·ªáu
                if re.search(r"STT|H·ªç ƒë·ªám|ƒêi·ªÉm|H·ªá s·ªë|M√£ s·ªë sinh vi√™n|X·∫øp lo·∫°i|Ghi ch√∫", line, re.IGNORECASE):
                    continue

                # T√°ch theo kho·∫£ng tr·∫Øng l·ªõn (d·∫•u hi·ªáu ph√¢n c·ªôt)
                parts = re.split(r'\s{2,}', line)
                if len(parts) < 6:
                    continue  # Kh√¥ng ƒë·ªß c·ªôt

                try:
                    stt = int(parts[0])
                    mssv = parts[1]
                    fullname = parts[2]
                    ho_dem, ten = split_name(fullname)

                    # T√¨m ƒëi·ªÉm (ch·ªâ l·∫•y d·∫°ng float x.y), lo·∫°i b·ªè c√°c "V", "--", "v·∫Øng thi", "ƒê∆∞·ª£c d·ª± thi"
                    score_values = [p for p in parts if re.match(r"\d+\.\d{2}", p)]
                    diem_chu = next((p for p in parts if re.match(r"^[ABCDF][+-]?$", p)), None)
                    xep_loai = parts[-2] if len(parts) >= 10 else ""
                    ghi_chu = parts[-1] if len(parts) >= 10 else ""

                    row = {
                        "STT": stt,
                        "M√£ s·ªë sinh vi√™n": mssv,
                        "H·ªç ƒë·ªám": ho_dem,
                        "T√™n": ten,
                        "ƒêi·ªÉm ch·ªØ": diem_chu,
                        "X·∫øp lo·∫°i": xep_loai,
                        "Ghi ch√∫": ghi_chu,
                    }

                    if len(score_values) == 5:
                        row.update({
                            "ƒêi·ªÉm gi·ªØa k·ª≥": float(score_values[0]),
                            "ƒêi·ªÉm th∆∞·ªùng k·ª≥": float(score_values[1]),
                            "ƒêi·ªÉm th·ª±c h√†nh": float(score_values[2]),
                            "ƒêi·ªÉm cu·ªëi k·ª≥": float(score_values[3]),
                            "ƒêi·ªÉm t·ªïng k·∫øt": float(score_values[4]),
                        })
                    elif len(score_values) == 4:
                        row.update({
                            "ƒêi·ªÉm gi·ªØa k·ª≥": float(score_values[0]),
                            "ƒêi·ªÉm th∆∞·ªùng k·ª≥": float(score_values[1]),
                            "ƒêi·ªÉm cu·ªëi k·ª≥": float(score_values[2]),
                            "ƒêi·ªÉm t·ªïng k·∫øt": float(score_values[3]),
                        })
                    elif len(score_values) == 3:
                        row.update({
                            "ƒêi·ªÉm cu·ªëi k·ª≥": float(score_values[0]),
                            "ƒêi·ªÉm t·ªïng k·∫øt": float(score_values[1]),
                        })

                    rows.append(row)

                except Exception as e:
                    st.warning(f"L·ªói d√≤ng: {line} ‚Äî {str(e)}")
                    continue

    df = pd.DataFrame(rows)
    return df


# File upload interface
uploaded_file = st.file_uploader("üìå T·∫£i file PDF b·∫£ng ƒëi·ªÉm:", type="pdf", accept_multiple_files=False, help="File PDF n√™n d∆∞·ªõi 200MB.")
if uploaded_file is not None:
    try:
        df = extract_scores_from_pdf(uploaded_file)
        if not df.empty:
            st.success("‚úÖ ƒê√£ tr√≠ch xu·∫•t th√†nh c√¥ng!")
            st.dataframe(df, use_container_width=True)
            
            # Download button for Excel, using the uploaded file's name
            output = io.BytesIO()
            df.to_excel(output, index=False, engine='openpyxl')
            output.seek(0)
            
            # Get the uploaded file's name and replace .pdf with .xlsx
            file_name = uploaded_file.name
            excel_file_name = os.path.splitext(file_name)[0] + ".xlsx"
            
            st.download_button(
                label="üì• T·∫£i xu·ªëng Excel",
                data=output,
                file_name=excel_file_name,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ file PDF.")
    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω file PDF: {str(e)}")
