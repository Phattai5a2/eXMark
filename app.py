import streamlit as st
import pdfplumber
import pandas as pd
import io
import re
import os

# ·∫®n thanh c√¥ng c·ª• Streamlit
st.markdown(
    """
    <style>
    [data-testid="stToolbar"] {visibility: hidden;}
    [data-testid="stStatusWidget"] {visibility: hidden;}
    [data-testid="stDecoration"] {visibility: hidden;}
    </style>
    """,
    unsafe_allow_html=True
)

st.set_page_config(page_title="Tr√≠ch xu·∫•t b·∫£ng ƒëi·ªÉm PDF", layout="wide")
st.title("üìÑ Tr√≠ch xu·∫•t b·∫£ng ƒëi·ªÉm t·ª´ file PDF")
st.markdown("T·∫£i l√™n file PDF ch·ª©a b·∫£ng ƒëi·ªÉm ƒë·ªÉ tr√≠ch xu·∫•t v√† l∆∞u ra Excel.")

def normalize_text(text):
    """Chu·∫©n h√≥a vƒÉn b·∫£n ƒë·ªÉ x·ª≠ l√Ω l·ªói OCR."""
    if not text:
        return text
    text = text.replace('Nguy√™a', 'Nguy·ªÖn').replace('Hau', 'H·∫≠u').replace('Ken', 'K√©m')
    text = text.replace('Hoc lai', 'H·ªçc l·∫°i').replace('Hoc lai', 'H·ªçc l·∫°i')
    return text.strip()

def split_name(fullname):
    """Split a full name into first/middle name (H·ªç ƒë·ªám) and last name (T√™n)."""
    if not fullname or not isinstance(fullname, str):
        return '', ''
    parts = fullname.strip().split()
    if not parts:
        return '', ''
    if len(parts) == 1:
        return '', parts[0]
    return ' '.join(parts[:-1]), parts[-1]

def extract_scores_from_pdf(file):
    """Extract grade data from PDF using table extraction."""
    rows = []
    has_thuongky = False
    has_giua_ky = False
    has_thuc_hanh = False
    
    with pdfplumber.open(file) as pdf:
        for page_num, page in enumerate(pdf.pages):
            tables = page.extract_tables()
            if not tables:
                st.warning(f"Kh√¥ng t√¨m th·∫•y b·∫£ng tr√™n trang {page_num + 1}.")
                continue
            
            for table in tables:
                for row in table[1:]:  # B·ªè qua d√≤ng ti√™u ƒë·ªÅ
                    if len(row) < 8:  # Ki·ªÉm tra s·ªë c·ªôt t·ªëi thi·ªÉu
                        st.warning(f"D√≤ng kh√¥ng ƒë·ªß c·ªôt tr√™n trang {page_num + 1}: {row}")
                        continue
                    try:
                        stt = int(row[0]) if row[0] else None
                        mssv = row[1] if row[1] else ''
                        fullname = normalize_text(row[2]) if row[2] else ''
                        diem_gk = float(row[3]) if row[3] else 0.0
                        diem_thuongky = float(row[4]) if row[4] else 0.0
                        diem_th = float(row[5]) if row[5] else None
                        diem_cuoi_ky = float(row[6]) if row[6] else 0.0
                        diem_tb = float(row[7]) if row[7] else 0.0
                        diem_chu = row[8] if row[8] else ''
                        ghi_chu = normalize_text(row[9]) if len(row) > 9 else ''
                        
                        if diem_chu not in ['A', 'B', 'C', 'D', 'F']:
                            st.warning(f"ƒêi·ªÉm ch·ªØ kh√¥ng h·ª£p l·ªá: {diem_chu} tr√™n d√≤ng: {row}")
                            continue
                        
                        ho_dem, ten = split_name(fullname)
                        row_data = {
                            "STT": stt,
                            "M√£ s·ªë sinh vi√™n": mssv,
                            "H·ªç ƒë·ªám": ho_dem,
                            "T√™n": ten,
                            "ƒêi·ªÉm gi·ªØa k·ª≥": diem_gk,
                            "ƒêi·ªÉm th∆∞·ªùng k·ª≥": diem_thuongky,
                            "ƒêi·ªÉm cu·ªëi k·ª≥": diem_cuoi_ky,
                            "ƒêi·ªÉm TB m√¥n h·ªçc": diem_tb,
                            "ƒêi·ªÉm ch·ªØ": diem_chu,
                            "Ghi ch√∫": ghi_chu
                        }
                        if diem_th is not None:
                            row_data["ƒêi·ªÉm th·ª±c h√†nh"] = diem_th
                            has_thuc_hanh = True
                        has_thuongky = True
                        has_giua_ky = True
                        rows.append(row_data)
                    except Exception as e:
                        st.warning(f"L·ªói x·ª≠ l√Ω d√≤ng tr√™n trang {page_num + 1}: {row}. L·ªói: {str(e)}")
                        continue
    
    df = pd.DataFrame(rows)
    if not has_thuc_hanh and "ƒêi·ªÉm th·ª±c h√†nh" in df.columns:
        df = df.drop(columns=["ƒêi·ªÉm th·ª±c h√†nh"])
    if not has_giua_ky and "ƒêi·ªÉm gi·ªØa k·ª≥" in df.columns:
        df = df.drop(columns=["ƒêi·ªÉm gi·ªØa k·ª≥"])
    if not has_thuongky and "ƒêi·ªÉm th∆∞·ªùng k·ª≥" in df.columns:
        df = df.drop(columns=["ƒêi·ªÉm th∆∞·ªùng k·ª≥"])
    return df

# File upload interface
uploaded_file = st.file_uploader("üìå T·∫£i file PDF b·∫£ng ƒëi·ªÉm:", type="pdf", accept_multiple_files=False, help="File PDF n√™n d∆∞·ªõi 200MB.")
if uploaded_file is not None:
    try:
        df = extract_scores_from_pdf(uploaded_file)
        if not df.empty:
            st.success("‚úÖ ƒê√£ tr√≠ch xu·∫•t th√†nh c√¥ng!")
            st.dataframe(df, use_container_width=True)
            st.info(f"T·ªïng s·ªë d√≤ng tr√≠ch xu·∫•t: {len(df)}")
            if "Ghi ch√∫" in df.columns:
                hoc_lai_rows = df[df["Ghi ch√∫"].str.contains("H·ªçc l·∫°i", case=False, na=False)]
                st.info(f"S·ªë d√≤ng c√≥ ghi ch√∫ 'H·ªçc l·∫°i': {len(hoc_lai_rows)}")
            
            # Download button for Excel
            output = io.BytesIO()
            df.to_excel(output, index=False, engine='openpyxl')
            output.seek(0)
            file_name = uploaded_file.name
            excel_file_name = os.path.splitext(file_name)[0] + ".xlsx"
            st.download_button(
                label="üì• T·∫£i xu·ªëng Excel",
                data=output,
                file_name=excel_file_name,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ file PDF.")
    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω file PDF: {str(e)}")
